{"version":3,"file":"filter-twist.js","sources":["../src/TwistFilter.js"],"sourcesContent":["import {vertex} from '@tools/fragments';\nimport fragment from './twist.frag';\nimport {Filter} from '@pixi/core';\nimport {Point} from '@pixi/math';\n\n/**\n * This filter applies a twist effect making display objects appear twisted in the given direction.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/twist.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-twist|@pixi/filter-twist}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {object} [options] Object object to use.\n * @param {number} [options.radius=200] The radius of the twist.\n * @param {number} [options.angle=4] The angle of the twist.\n * @param {number} [options.padding=20] Padding for filter area.\n * @param {number} [options.offset] Center of twist, in local, pixel coordinates.\n */\nclass TwistFilter extends Filter {\n    constructor(options) {\n        super(vertex, fragment);\n\n        // @deprecated: constructor (radius, angle, padding)\n        if (typeof options === 'number') {\n            options = { radius: options };\n            if (arguments[1] !== undefined) {\n                options.angle = arguments[1];\n            }\n            if (arguments[2] !== undefined) {\n                options.padding = arguments[2];\n            }\n        }\n\n        Object.assign(this, {\n            radius: 200,\n            angle: 4,\n            padding: 20,\n            offset: new Point(),\n        }, options);\n    }\n\n    /**\n     * This point describes the the offset of the twist.\n     *\n     * @member {PIXI.Point}\n     */\n    get offset() {\n        return this.uniforms.offset;\n    }\n    set offset(value) {\n        this.uniforms.offset = value;\n    }\n\n    /**\n     * The radius of the twist.\n     *\n     * @member {number}\n     */\n    get radius() {\n        return this.uniforms.radius;\n    }\n    set radius(value) {\n        this.uniforms.radius = value;\n    }\n\n    /**\n     * The angle of the twist.\n     *\n     * @member {number}\n     */\n    get angle() {\n        return this.uniforms.angle;\n    }\n    set angle(value) {\n        this.uniforms.angle = value;\n    }\n}\n\nexport { TwistFilter };\n\n"],"names":["TwistFilter","options","super","vertex","fragment","radius","undefined","arguments","angle","padding","Object","assign","this","offset","Point","prototypeAccessors","uniforms","value","Filter"],"mappings":";;;;;;;szCAoBMA,cACF,WAAYC,GACRC,YAAMC,EAAQC,GAGS,iBAAZH,IACPA,EAAU,CAAEI,OAAQJ,QACCK,IAAjBC,UAAU,KACVN,EAAQO,MAAQD,UAAU,SAETD,IAAjBC,UAAU,KACVN,EAAQQ,QAAUF,UAAU,KAIpCG,OAAOC,OAAOC,KAAM,CAChBP,OAAQ,IACRG,MAAO,EACPC,QAAS,GACTI,OAAQ,IAAIC,SACbb,mLAQPc,EAAIF,sBACA,OAAOD,KAAKI,SAASH,QAEzBE,EAAIF,oBAAOI,GACPL,KAAKI,SAASH,OAASI,GAQ3BF,EAAIV,sBACA,OAAOO,KAAKI,SAASX,QAEzBU,EAAIV,oBAAOY,GACPL,KAAKI,SAASX,OAASY,GAQ3BF,EAAIP,qBACA,OAAOI,KAAKI,SAASR,OAEzBO,EAAIP,mBAAMS,GACNL,KAAKI,SAASR,MAAQS,6CAxDJC"}